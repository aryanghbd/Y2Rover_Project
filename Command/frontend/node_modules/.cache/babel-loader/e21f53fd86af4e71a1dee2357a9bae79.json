{"ast":null,"code":"var _jsxFileName = \"/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar React = require('react');\n\nvar Component = React.Component;\n\nvar CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar data = [];\nvar pos = [''];\nvar updateInterval = 1000;\nvar lastMsg;\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {\n  clientId: \"react_position\",\n  username: \"hs2119\",\n  password: \"marsrover\"\n});\nconsole.log(\"connected flag  \" + client.connected);\nvar topic_list = [\"position\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list, {\n  qos: 1\n}); //topic list\n\nclient.on(\"connect\", function () {\n  console.log(\"connected  \" + client.connected);\n});\n\nclass Map extends Component {\n  constructor() {\n    super();\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n    });\n\n    if (message.toString() != pos[pos.length - 1]) {\n      pos.push(message);\n      console.log(\"diff value\" + message + \" \" + pos[pos.length - 1]);\n      var coords = message.toString();\n      var coords_str = coords.split(',');\n      var x = coords_str[0];\n      var y = coords_str[1];\n      data.push({\n        x: x,\n        y: y\n      });\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const options = {\n      title: {\n        text: \"Dynamic Line Chart\"\n      },\n      data: [{\n        type: \"line\",\n        dataPoints: data\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CanvasJSChart, {\n        options: options,\n        onRef: ref => this.chart = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js"],"names":["React","require","Component","CanvasJSReact","CanvasJS","CanvasJSChart","data","pos","updateInterval","lastMsg","mqtt","client","connect","clientId","username","password","console","log","connected","topic_list","subscribe","qos","on","Map","constructor","updateChart","bind","componentDidMount","setInterval","topic","message","packet","toString","length","push","coords","coords_str","split","x","y","chart","render","options","title","text","type","dataPoints","ref"],"mappings":"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","sourcesContent":["var React = require('react');\nvar Component = React.Component;\nvar CanvasJSReact = require('./canvasjs.react');\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar data = []\nvar pos = ['']\nvar updateInterval = 1000;\n\nvar lastMsg\nvar mqtt = require('mqtt')\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {clientId:\"react_position\", username:\"hs2119\", password:\"marsrover\"})\nconsole.log(\"connected flag  \" + client.connected);\n\nvar topic_list=[\"position\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list,{qos:1}); //topic list\n\nclient.on(\"connect\",function(){\t\n  console.log(\"connected  \"+ client.connected);\n  })\n\nclass Map extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.updateChart = this.updateChart.bind(this);\n\t}\n\tcomponentDidMount() {\n\t\tsetInterval(this.updateChart, updateInterval);\n\t}\n\tupdateChart() {\n\t\tclient.on('message',function(topic, message, packet){\n      console.log(\"message is \"+ message);\n      console.log(\"topic is \"+ topic);\n      lastMsg = message.toString()\n    })\n\n    if (message.toString() != pos[pos.length - 1]){\n    pos.push(message)\n      console.log(\"diff value\"+ message + \" \" + pos[pos.length - 1])\n      \n      var coords = message.toString();\n      var coords_str = coords.split(',')\n      var x = coords_str[0];\n      var y = coords_str[1];\n      data.push({x: x,y: y});\n    }  \n    \n\t\t\n\t\tthis.chart.render();\n\t}\n\trender() {\n\t\tconst options = {\n\t\t\ttitle :{\n\t\t\t\ttext: \"Dynamic Line Chart\"\n\t\t\t},\n\t\t\tdata: [{\n\t\t\t\ttype: \"line\",\n\t\t\t\tdataPoints : data\n\t\t\t}]\n\t\t}\n\t\treturn (\n\t\t<div>\n\t\t\t<CanvasJSChart options = {options}\n\t\t\t\t onRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t</div>\n\t\t);\n\t}\n}\nexport default Map;                     "]},"metadata":{},"sourceType":"module"}