{"ast":null,"code":"var _jsxFileName = \"/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js\";\nimport { CanvasJSChart } from 'canvasjs-react-charts';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar data = [];\nvar pos = [''];\nvar updateInterval = 10;\nvar lastMsg;\nvar lastTopic;\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {\n  clientId: \"react_position\",\n  username: \"hs2119\",\n  password: \"marsrover\"\n});\nconsole.log(\"connected flag  \" + client.connected);\nvar topic_list = [\"position\", \"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list, {\n  qos: 1\n}); //topic list\n\nclient.on(\"connect\", function () {\n  console.log(\"connected  \" + client.connected);\n});\n\nclass Map extends Component {\n  constructor() {\n    super();\n    this.updateChart = this.updateChart.bind(this); //this.colour = ''\n    //this.objectproximity = ''\n    //this.objectcoordinates  = ''\t\n\n    this.state = {\n      currentObstacle: {\n        colour: \"\",\n        objectcoordinates: \"\",\n        objectproximity: \"\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    client.on('message', function (topic, message, packet) {\n      // console.log(\"message is \"+ message);\n      // console.log(\"topic is \"+ topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString();\n    });\n\n    if (lastTopic == 'colour') {\n      this.setState({\n        colour: lastMsg\n      }); //console.log('im here')\n      //console.log(this.colour)\n\n      this.render();\n    }\n\n    if (lastTopic == 'objectproximity') {\n      this.setState({\n        objectproximity: lastMsg\n      });\n      this.render();\n    }\n\n    if (lastTopic == 'objectcoordinates') {\n      this.setState({\n        objectcoordinates: lastMsg\n      });\n      this.render();\n    }\n\n    if (lastTopic == 'position') {\n      if (lastMsg != null && lastMsg != pos[pos.length - 1] && this.chart != null && lastMsg != '-128,-128') {\n        pos.push(lastMsg); //console.log(\"diff value\"+ lastMsg + \" \" + pos[pos.length - 1])\n\n        var coords_str = lastMsg.split(',');\n        var x = parseFloat(coords_str[0]);\n        var y = parseFloat(coords_str[1]);\n        data.push({\n          x: x,\n          y: y\n        });\n        console.log(data);\n        this.chart.render();\n      }\n    }\n  }\n\n  render() {\n    const options = {\n      height: 700,\n      width: 1300,\n      title: {\n        text: \"Mars Rover Plot\"\n      },\n      data: [{\n        type: \"line\",\n        dataPoints: data\n      }]\n    };\n    console.log(this.state.colour);\n    var x = this.state.colour;\n    var y = this.state.objectcoordinates;\n    var z = this.state.objectproximity;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CanvasJSChart, {\n        options: options,\n        onRef: ref => this.chart = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"An object coloured \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: x\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 27\n        }, this), \" has been detected with position \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: y\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 74\n        }, this), \" the object is \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: z\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 103\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js"],"names":["CanvasJSChart","React","Component","data","pos","updateInterval","lastMsg","lastTopic","mqtt","require","client","connect","clientId","username","password","console","log","connected","topic_list","subscribe","qos","on","Map","constructor","updateChart","bind","state","currentObstacle","colour","objectcoordinates","objectproximity","componentDidMount","setInterval","topic","message","packet","toString","setState","render","length","chart","push","coords_str","split","x","parseFloat","y","options","height","width","title","text","type","dataPoints","z","ref"],"mappings":"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","sourcesContent":["import {CanvasJSChart} from 'canvasjs-react-charts'\nimport React, { Component } from 'react';\n\nvar data = []\nvar pos = ['']\nvar updateInterval = 10;\n\nvar lastMsg\nvar lastTopic\nvar mqtt = require('mqtt')\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {clientId:\"react_position\", username:\"hs2119\", password:\"marsrover\"})\nconsole.log(\"connected flag  \" + client.connected);\n\nvar topic_list=[\"position\",\"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list,{qos:1}); //topic list\n\nclient.on(\"connect\",function(){\t\n  console.log(\"connected  \"+ client.connected);\n  })\n\n\nclass Map extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.updateChart = this.updateChart.bind(this);\n\t\t//this.colour = ''\n\t\t//this.objectproximity = ''\n\t\t//this.objectcoordinates  = ''\t\n\n\t\tthis.state = {\n\t\t\tcurrentObstacle: {\n\t\t\tcolour: \"\",\n\t\t\tobjectcoordinates: \"\",\n\t\t\tobjectproximity: \"\", \n\t\t\t}\n\t\t  };\n\t}\n\tcomponentDidMount() {\n\t\tsetInterval(this.updateChart, updateInterval);\n\t}\n\n\tupdateChart() {\n\t\tclient.on('message',function(topic, message, packet){\n     // console.log(\"message is \"+ message);\n     // console.log(\"topic is \"+ topic);\n      lastMsg = message.toString()\n\t  lastTopic = topic.toString()\n\t\n    })\n\n    if (lastTopic == 'colour'){\n\t\tthis.setState({\n\t\t\tcolour: lastMsg\n\t\t})\n\t\t//console.log('im here')\n\t\t//console.log(this.colour)\n\t\tthis.render();\n\t  }\n\t  if (lastTopic == 'objectproximity'){\n\t\tthis.setState({\n\t\t\tobjectproximity: lastMsg\n\t\t})\n\t\tthis.render();\n\t  }\n\t  if (lastTopic == 'objectcoordinates'){\n\t\tthis.setState({\n\t\t\tobjectcoordinates: lastMsg\n\t\t})\n\t\tthis.render();\n  }\n\tif (lastTopic == 'position'){\n    \tif (lastMsg != null && lastMsg != pos[pos.length - 1] && this.chart != null && lastMsg != '-128,-128'){\n    \t\tpos.push(lastMsg)\n      \t\t//console.log(\"diff value\"+ lastMsg + \" \" + pos[pos.length - 1])\n      \n      \t\tvar coords_str = lastMsg.split(',')\n      \t\tvar x = parseFloat(coords_str[0]);\n      \t\tvar y = parseFloat(coords_str[1]);\n      \t\tdata.push({x: x,y: y});\n      \t\tconsole.log(data)\n      \t\tthis.chart.render();\n    } }\n\t\n\t\n\t\t\n\t}\n\n\n\trender() {\n\t\tconst options = {\n\t\t\theight: 700,\n\t\t\twidth: 1300,\n\t\t\ttitle :{\n\t\t\t\ttext: \"Mars Rover Plot\"\n\t\t\t},\n\t\t\tdata: [{\n\t\t\t\ttype: \"line\",\n\t\t\t\tdataPoints : data\n\t\t\t}]\n\t\t}\n\n\t\tconsole.log(this.state.colour)\n\t\tvar x = this.state.colour\n\t\tvar y = this.state.objectcoordinates\n\t\tvar z = this.state.objectproximity\n\t\t\n\t\treturn (\n\t\t<div>\n\t\t\t<CanvasJSChart options = {options}\n\t\t\t\t onRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t\t<h4>An object coloured <div>{x}</div> has been detected with position <div>{y}</div> the object is <div>{z}</div> </h4>\n\t\t</div>\n\t\t);\n\t}\n}\nexport default Map;                     "]},"metadata":{},"sourceType":"module"}