{"ast":null,"code":"var _jsxFileName = \"/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js\";\nimport { CanvasJSChart } from 'canvasjs-react-charts';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar data = [];\nvar pos = [''];\nvar updateInterval = 10;\nvar lastMsg;\nvar lastTopic;\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {\n  clientId: \"react_position\",\n  username: \"hs2119\",\n  password: \"marsrover\"\n});\nconsole.log(\"connected flag  \" + client.connected);\nvar topic_list = [\"position\", \"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list, {\n  qos: 1\n}); //topic list\n\nclient.on(\"connect\", function () {\n  console.log(\"connected  \" + client.connected);\n});\nclient.on('message', function (topic, message, packet) {\n  console.log(\"message is \" + message);\n  console.log(\"topic is \" + topic);\n  var tmp = message.toString();\n  lastMsg = (' ' + tmp).slice(1);\n});\nconsole.log(lastMsg);\n\nclass Map extends Component {\n  constructor() {\n    super();\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString;\n    });\n\n    if (lastTopic == 'position') {\n      if (lastMsg != null && lastMsg != pos[pos.length - 1]) {\n        pos.push(lastMsg);\n        console.log(\"diff value\" + lastMsg + \" \" + pos[pos.length - 1]);\n        var coords_str = lastMsg.split(',');\n        var x = parseFloat(coords_str[0]);\n        var y = parseFloat(coords_str[1]);\n        data.push({\n          x: x,\n          y: y\n        });\n        console.log(data);\n        this.chart.render();\n      }\n    }\n  }\n\n  updateColour() {}\n\n  render() {\n    const options = {\n      title: {\n        text: \"Mars Rover Plot\"\n      },\n      data: [{\n        type: \"line\",\n        dataPoints: data\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CanvasJSChart, {\n        options: options,\n        onRef: ref => this.chart = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js"],"names":["CanvasJSChart","React","Component","data","pos","updateInterval","lastMsg","lastTopic","mqtt","require","client","connect","clientId","username","password","console","log","connected","topic_list","subscribe","qos","on","topic","message","packet","tmp","toString","slice","Map","constructor","updateChart","bind","componentDidMount","setInterval","length","push","coords_str","split","x","parseFloat","y","chart","render","updateColour","options","title","text","type","dataPoints","ref"],"mappings":"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","sourcesContent":["import {CanvasJSChart} from 'canvasjs-react-charts'\nimport React, { Component } from 'react';\n\nvar data = []\nvar pos = ['']\nvar updateInterval = 10;\n\nvar lastMsg\nvar lastTopic\nvar mqtt = require('mqtt')\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {clientId:\"react_position\", username:\"hs2119\", password:\"marsrover\"})\nconsole.log(\"connected flag  \" + client.connected);\n\nvar topic_list=[\"position\",\"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list,{qos:1}); //topic list\n\nclient.on(\"connect\",function(){\t\n  console.log(\"connected  \"+ client.connected);\n  })\n\n  client.on('message',function(topic, message, packet){\n    console.log(\"message is \"+ message);\n    console.log(\"topic is \"+ topic);\n    var tmp = message.toString()\n    lastMsg = (' ' + tmp).slice(1);\n  })\n  console.log(lastMsg)\n\nclass Map extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.updateChart = this.updateChart.bind(this);\n\t}\n\tcomponentDidMount() {\n\t\tsetInterval(this.updateChart, updateInterval);\n\t}\n\tupdateChart() {\n\t\tclient.on('message',function(topic, message, packet){\n      console.log(\"message is \"+ message);\n      console.log(\"topic is \"+ topic);\n      lastMsg = message.toString()\n\t  lastTopic = topic.toString\n    })\n    \n\tif (lastTopic == 'position'){\n    \tif (lastMsg != null && lastMsg != pos[pos.length - 1]){\n    \t\tpos.push(lastMsg)\n      \t\tconsole.log(\"diff value\"+ lastMsg + \" \" + pos[pos.length - 1])\n      \n      \t\tvar coords_str = lastMsg.split(',')\n      \t\tvar x = parseFloat(coords_str[0]);\n      \t\tvar y = parseFloat(coords_str[1]);\n      \t\tdata.push({x: x,y: y});\n      \t\tconsole.log(data)\n      \t\tthis.chart.render();\n    }  \n\t}\t\n\t}\n\n\tupdateColour() {\n\n\t}\n\n\n\trender() {\n\t\tconst options = {\n\t\t\ttitle :{\n\t\t\t\ttext: \"Mars Rover Plot\"\n\t\t\t},\n\t\t\tdata: [{\n\t\t\t\ttype: \"line\",\n\t\t\t\tdataPoints : data\n\t\t\t}]\n\t\t}\n\t\treturn (\n\t\t<div>\n\t\t\t<CanvasJSChart options = {options}\n\t\t\t\t onRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t</div>\n\t\t);\n\t}\n}\nexport default Map;                     "]},"metadata":{},"sourceType":"module"}