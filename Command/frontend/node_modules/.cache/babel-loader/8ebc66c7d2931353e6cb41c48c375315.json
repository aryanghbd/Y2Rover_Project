{"ast":null,"code":"var _jsxFileName = \"/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js\";\nimport { CanvasJSChart } from 'canvasjs-react-charts';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar data = [];\nvar pos = [''];\nvar updateInterval = 10;\nvar lastMsg;\nvar lastTopic;\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {\n  clientId: \"react_position\",\n  username: \"hs2119\",\n  password: \"marsrover\"\n});\nconsole.log(\"connected flag  \" + client.connected);\nvar topic_list = [\"position\", \"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list, {\n  qos: 1\n}); //topic list\n\nclient.on(\"connect\", function () {\n  console.log(\"connected  \" + client.connected);\n});\n\nclass Map extends Component {\n  constructor() {\n    super();\n    this.updateChart = this.updateChart.bind(this);\n    this.updateColour = this.updateColour.bind(this);\n    this.updateProximity = this.updateProximity.bind(this);\n    this.updateCoordinates = this.updateCoordinates.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval); //\tthis.updateColour();\n    //\tthis.updateProximity();\n    //\tthis.updateCoordinates();\n  }\n\n  updateChart() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString();\n    });\n\n    if (lastTopic == 'position') {\n      if (lastMsg != null && lastMsg != pos[pos.length - 1] && this.chart != null) {\n        pos.push(lastMsg);\n        console.log(\"diff value\" + lastMsg + \" \" + pos[pos.length - 1]);\n        var coords_str = lastMsg.split(',');\n        var x = parseFloat(coords_str[0]);\n        var y = parseFloat(coords_str[1]);\n        data.push({\n          x: x,\n          y: y\n        });\n        console.log(data);\n        console.log(this.chart);\n        this.chart.render();\n      }\n    }\n  }\n\n  updateColour() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString();\n    });\n\n    if (lastTopic == 'colour') {\n      return lastMsg;\n    }\n  }\n\n  updateProximity() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString;\n    });\n\n    if (lastTopic == 'objectproximity') {\n      return lastMsg;\n    }\n  }\n\n  updateCoordinates() {\n    client.on('message', function (topic, message, packet) {\n      console.log(\"message is \" + message);\n      console.log(\"topic is \" + topic);\n      lastMsg = message.toString();\n      lastTopic = topic.toString;\n    });\n\n    if (lastTopic == 'objectcoordinates') {\n      return lastMsg;\n    }\n  }\n\n  render() {\n    const options = {\n      title: {\n        text: \"Mars Rover Plot\"\n      },\n      data: [{\n        type: \"line\",\n        dataPoints: data\n      }]\n    };\n    console.log(this.updateColour());\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CanvasJSChart, {\n          options: options,\n          onRef: ref => this.chart = ref\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n        children: \"var colour = updateColour(); document.getElementById('message').innerHTML = colour;\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/hollysolomon/Documents/year2/finalproject/test2/react-crud/src/components/mapv2.component.js"],"names":["CanvasJSChart","React","Component","data","pos","updateInterval","lastMsg","lastTopic","mqtt","require","client","connect","clientId","username","password","console","log","connected","topic_list","subscribe","qos","on","Map","constructor","updateChart","bind","updateColour","updateProximity","updateCoordinates","componentDidMount","setInterval","topic","message","packet","toString","length","chart","push","coords_str","split","x","parseFloat","y","render","options","title","text","type","dataPoints","ref"],"mappings":"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","sourcesContent":["import {CanvasJSChart} from 'canvasjs-react-charts'\nimport React, { Component } from 'react';\n\nvar data = []\nvar pos = ['']\nvar updateInterval = 10;\n\nvar lastMsg\nvar lastTopic\nvar mqtt = require('mqtt')\nvar client = mqtt.connect(\"ws://18.117.97.5:9001\", {clientId:\"react_position\", username:\"hs2119\", password:\"marsrover\"})\nconsole.log(\"connected flag  \" + client.connected);\n\nvar topic_list=[\"position\",\"colour\", \"objectproximity\", \"objectcoordinates\"];\nconsole.log(\"subscribing to topics\");\nclient.subscribe(topic_list,{qos:1}); //topic list\n\nclient.on(\"connect\",function(){\t\n  console.log(\"connected  \"+ client.connected);\n  })\n\n\nclass Map extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.updateChart = this.updateChart.bind(this);\n\t\tthis.updateColour = this.updateColour.bind(this);\n\t\tthis.updateProximity = this.updateProximity.bind(this);\n\t\tthis.updateCoordinates = this.updateCoordinates.bind(this);\n\t}\n\tcomponentDidMount() {\n\t\tsetInterval(this.updateChart, updateInterval);\n\t//\tthis.updateColour();\n\t//\tthis.updateProximity();\n\t//\tthis.updateCoordinates();\n\t}\n\n\tupdateChart() {\n\t\tclient.on('message',function(topic, message, packet){\n      console.log(\"message is \"+ message);\n      console.log(\"topic is \"+ topic);\n      lastMsg = message.toString()\n\t  lastTopic = topic.toString()\n    })\n    \n\tif (lastTopic == 'position'){\n    \tif (lastMsg != null && lastMsg != pos[pos.length - 1] && this.chart != null ){\n    \t\tpos.push(lastMsg)\n      \t\tconsole.log(\"diff value\"+ lastMsg + \" \" + pos[pos.length - 1])\n      \n      \t\tvar coords_str = lastMsg.split(',')\n      \t\tvar x = parseFloat(coords_str[0]);\n      \t\tvar y = parseFloat(coords_str[1]);\n      \t\tdata.push({x: x,y: y});\n      \t\tconsole.log(data)\n\t\t\t  console.log(this.chart)\n      \t\tthis.chart.render();\n    }  \n\t}\t\n\t}\n\n\tupdateColour() {\n\t\tclient.on('message',function(topic, message, packet){\n\t\t\tconsole.log(\"message is \"+ message);\n\t\t\tconsole.log(\"topic is \"+ topic);\n\t\t\tlastMsg = message.toString()\n\t\t\tlastTopic = topic.toString()\n\t\t  })\n\t\t  \n\t\t  if (lastTopic == 'colour'){\n\t\t\treturn lastMsg\n\t\t  }\n\t}\n\n\n\tupdateProximity() {\n\t\tclient.on('message',function(topic, message, packet){\n\t\t\tconsole.log(\"message is \"+ message);\n\t\t\tconsole.log(\"topic is \"+ topic);\n\t\t\tlastMsg = message.toString()\n\t\t\tlastTopic = topic.toString\n\t\t  })\n\t\t  \n\t\t  if (lastTopic == 'objectproximity'){\n\t\t\treturn lastMsg\n\t\t  }\n\t}\n\n\tupdateCoordinates() {\n\t\tclient.on('message',function(topic, message, packet){\n\t\t\tconsole.log(\"message is \"+ message);\n\t\t\tconsole.log(\"topic is \"+ topic);\n\t\t\tlastMsg = message.toString()\n\t\t\tlastTopic = topic.toString\n\t\t  })\n\t\t  \n\t\t  if (lastTopic == 'objectcoordinates'){\n\t\t\treturn lastMsg\n\t\t  }\n\t}\n\n\trender() {\n\t\tconst options = {\n\t\t\ttitle :{\n\t\t\t\ttext: \"Mars Rover Plot\"\n\t\t\t},\n\t\t\tdata: [{\n\t\t\t\ttype: \"line\",\n\t\t\t\tdataPoints : data\n\t\t\t}]\n\t\t}\n\t\tconsole.log(this.updateColour())\n\t\treturn (\n\t\t<body><div>\n\t\t\t<CanvasJSChart options = {options}\n\t\t\t\t onRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t\t{/*<h4>An object coloured <var>this.updateColour()</var> has been detected with position <var>this.updateCoordinates()</var>, the object is {this.updateProximity} </h4>*/}\n\t\t\t\n\t\t\t  <p id='message'></p>\n\t\t</div>\n\t\t<script>\n\t\tvar colour = updateColour();\n\t\t\n\t\t\n\t\tdocument.getElementById('message').innerHTML = colour;\n\t\t</script>\n\t\t</body>\n\t\t);\n\t}\n}\nexport default Map;                     "]},"metadata":{},"sourceType":"module"}